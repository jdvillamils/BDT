{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4667148d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import uproot3\n",
    "import pandas as pd \n",
    "import time \n",
    "import math \n",
    "import numpy as np \n",
    "import matplotlib.pyplot as plt \n",
    "from matplotlib.ticker import AutoMinorLocator \n",
    "\n",
    "#Local information file\n",
    "import infofile "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9ceed339",
   "metadata": {},
   "source": [
    "List with all the sampels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "241c2b80",
   "metadata": {},
   "outputs": [],
   "source": [
    "samples = {\n",
    "    \n",
    "    'data' : {\n",
    "        'list' : ['data_A',\n",
    "                 'data_B',\n",
    "                 'data_C',\n",
    "                 'data_D']\n",
    "    },\n",
    "    \n",
    "    'Z' : {\n",
    "        'list' : ['Zee',\n",
    "                 'Zmumu',\n",
    "                 'Ztautau']\n",
    "    },\n",
    "    \n",
    "    'diboson' : {\n",
    "        'list' : ['ZqqZll',\n",
    "                  'WqqZll',\n",
    "                  'WpqqWmlv',\n",
    "                  'WplvWmqq',\n",
    "                  'WlvZqq',\n",
    "                  'llll',\n",
    "                  'lllv',\n",
    "                  'llvv',\n",
    "                  'lvvv']\n",
    "    },\n",
    "    \n",
    "    'single_top' : {\n",
    "        'list' : ['single_top_tchan',\n",
    "                  'single_antitop_tchan',\n",
    "                  'single_top_schan',\n",
    "                  'single_antitop_schan',\n",
    "                  'single_top_wtchan',\n",
    "                  'single_antitop_wtchan']\n",
    "    },\n",
    "    \n",
    "    'WJets' : {\n",
    "        'list' : ['Wplusenu',\n",
    "                 'Wplusmunu',\n",
    "                 'Wplustaunu',\n",
    "                 'Wminusenu',\n",
    "                 'Wminusmunu',\n",
    "                 'Wminustaunu']\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5cfb905e",
   "metadata": {},
   "outputs": [],
   "source": [
    "lumi = 10 # data_A+B+C+D\n",
    "\n",
    "fraction = 1 # reduce to run quicker\n",
    "\n",
    "tuple_path = \"https://atlas-opendata.web.cern.ch/atlas-opendata/samples/2020/2lep/\" "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "92d1acd9",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_data_from_files():\n",
    "\n",
    "    data = {} \n",
    "    for s in samples: \n",
    "        print('Processing '+s+' samples') \n",
    "        frames = [] \n",
    "        for val in samples[s]['list']: \n",
    "            if s == 'data': prefix = \"Data/\" # Data prefix\n",
    "            else: # MC prefix\n",
    "                prefix = \"MC/mc_\"+str(infofile.infos[val][\"DSID\"])+\".\"\n",
    "            fileString = tuple_path+prefix+val+\".1largeRjet1lep.root\" \n",
    "            temp = read_file(fileString,val) \n",
    "            frames.append(temp) \n",
    "        data[s] = pd.concat(frames) \n",
    "    \n",
    "    return data "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2ba1def3",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_xsec_weight(sample):\n",
    "    info = infofile.infos[sample] \n",
    "    xsec_weight = (lumi*1000*info[\"xsec\"])/(info[\"sumw\"]*info[\"red_eff\"]) \n",
    "    return xsec_weight "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b4b2eed5",
   "metadata": {},
   "outputs": [],
   "source": [
    "def calc_weight(xsec_weight, mcWeight, scaleFactor_PILEUP,\n",
    "                scaleFactor_ELE, scaleFactor_MUON, \n",
    "                scaleFactor_LepTRIGGER ):\n",
    "    return xsec_weight*mcWeight*scaleFactor_PILEUP*scaleFactor_ELE*scaleFactor_MUON*scaleFactor_LepTRIGGER"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "30855918",
   "metadata": {},
   "source": [
    "Definition of the cut functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6362aefc",
   "metadata": {},
   "outputs": [],
   "source": [
    "def cut_trig(trige,trigm):\n",
    "    l=1\n",
    "    if trige==1 or trigm==1:\n",
    "        l=0\n",
    "    return(l != 0) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f8e86b31",
   "metadata": {},
   "outputs": [],
   "source": [
    "def find_good_leptons(lep_pt,lep_ptcone30,lep_etcone20,lep_type,lep_eta,lep_trackd0pvunbiased,lep_tracksigd0pvunbiased,lep_eta,lep_z0):\n",
    "    if lep_pt[0] <25000 : return True  #pt required to be bigger than 25GeV\n",
    "    #isolated leptons (good when <0.15)\n",
    "    if lep_ptcone30[0]/lep_pt[0] > 0.15: return True\n",
    "    if lep_ptcone30[1]/lep_pt[1] > 0.15: return True\n",
    "    if lep_etcone20[0]/lep_pt[0] > 0.15: return True\n",
    "    if lep_etcone20[1]/lep_pt[1] > 0.15: return True\n",
    "    #electron in fiducial region\n",
    "    if lep_type[0]==11 and (abs(lep_eta[0]>2.47) or abs(lep_eta[0]>1.37)) : return True\n",
    "    if lep_type[1]==11 and (abs(lep_eta[1]>2.47) or abs(lep_eta[1]>1.37)) : return True\n",
    "    theta0 = 2*np.arctan(np.exp(-lep_eta[0]))\n",
    "    theta1 = 2*np.arctan(np.exp(-lep_eta[1]))\n",
    "    if lep_trackd0pvunbiased[0]/lep_tracksigd0pvunbiased[0] > 5 and abs(lep_z0[0]*np.sin(theta0))>0.5: return True\n",
    "    if lep_trackd0pvunbiased[1]/lep_tracksigd0pvunbiased[1] > 5 and abs(lep_z0[1]*np.sin(theta1))>0.5: return True\n",
    "    "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
