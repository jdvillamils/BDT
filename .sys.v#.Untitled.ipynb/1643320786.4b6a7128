{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "4824a3bd",
   "metadata": {},
   "outputs": [],
   "source": [
    "import ROOT\n",
    "from ROOT import TMath\n",
    "import time\n",
    "import uproot3\n",
    "import numpy as np\n",
    "import root_pandas as rp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "ea67a0ef",
   "metadata": {},
   "outputs": [],
   "source": [
    "%jsroot on"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "d6091543",
   "metadata": {},
   "outputs": [],
   "source": [
    "fsig = ROOT.TFile.Open(\"https://atlas-opendata.web.cern.ch/atlas-opendata/samples/2020/2lep/MC/mc_361106.Zee.2lep.root\")\n",
    "fsig = ROOT.TFile.Open(\"https://atlas-opendata.web.cern.ch/atlas-opendata/samples/2020/2lep/MC/mc_361107.Zmumu.2lep.root\")\n",
    "fsig = ROOT.TFile.Open(\"https://atlas-opendata.web.cern.ch/atlas-opendata/samples/2020/2lep/MC/mc_361108.Ztautau.2lep.root\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "f4758e13",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "182180"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tree = fsig.Get(\"mini\")\n",
    "tree.GetEntries()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "621e5283",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<TFileRecreate b'example.root' at 0x7f67770830a0>"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "roof = uproot3.recreate(\"example.root\")\n",
    "roof"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "3e813e6b",
   "metadata": {},
   "outputs": [],
   "source": [
    "roof[\"signal\"] = uproot3.newtree({\"mll\": np.float32, \"lead\": np.float32, \"sublead\": np.float32})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "id": "b915e148",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Initial entries: 182180\n",
      "Final entries: 2613\n",
      "Finished in 0 min 21 s\n",
      "103187 33471 19160 10571 5320 5251 2613\n",
      "Success closing\n"
     ]
    }
   ],
   "source": [
    "start = time.time()\n",
    "invM=[]\n",
    "leadpt=[]\n",
    "subleadpt=[]\n",
    "leadlepton = ROOT.TLorentzVector()\n",
    "subleadlepton = ROOT.TLorentzVector()\n",
    "lepton12 = ROOT.TLorentzVector()\n",
    "k=0\n",
    "kf=0\n",
    "c1=0\n",
    "c2=0\n",
    "c3=0\n",
    "c4=0\n",
    "c5=0\n",
    "c6=0\n",
    "c7=0\n",
    "index1=0\n",
    "index2=0\n",
    "for event in tree:\n",
    "    k=k+1\n",
    "    goodlep=0\n",
    "    if(tree.trigE or tree.trigE):\n",
    "        c1+=1\n",
    "    if(tree.lep_n==2):\n",
    "            for j in range(tree.lep_n):\n",
    "                if((tree.lep_pt[j]>25000.) and (tree.lep_ptcone30[j]/tree.lep_pt[j] < 0.15) and (tree.lep_etcone20[j]/tree.lep_pt[j] < 0.15)):\n",
    "                    if(tree.lep_type[j]==11 and abs(tree.lep_eta[j])<2.47 and (abs(tree.lep_eta[j])<1.37 or abs(tree.lep_eta[j])>1.52)):\n",
    "                        theta = 2*np.arctan(np.exp(-tree.lep_eta[j]))\n",
    "                        if(tree.lep_trackd0pvunbiased[j]/tree.lep_tracksigd0pvunbiased[j] < 5 and abs(tree.lep_z0[j]*np.sin(theta))<0.5):\n",
    "                            goodlep+=1\n",
    "                            index1=j\n",
    "                    if(tree.lep_type[j]==13 and abs(tree.lep_eta[j]<2.5)):\n",
    "                        theta = 2*np.arctan(np.exp(-tree.lep_eta[j]))\n",
    "                        if(tree.lep_trackd0pvunbiased[j]/tree.lep_tracksigd0pvunbiased[j] < 3 and abs(tree.lep_z0[j]*np.sin(theta))<0.5):\n",
    "                            goodlep+=1\n",
    "                            index2=j\n",
    "            if(goodlep==2):\n",
    "                c2+=1\n",
    "                if(tree.jet_n==0):\n",
    "                    c3+=1\n",
    "                    if(tree.lep_charge[index1]*tree.lep_charge[index2]<0 and tree.lep_type[index1]!=tree.lep_type[index2]):\n",
    "                        c4+=1\n",
    "                        if(tree.lep_pt[index1]>tree.lep_pt[index2]):\n",
    "                            c5+=1\n",
    "                            leadlepton.SetPtEtaPhiE(tree.lep_pt[index1], tree.lep_eta[index1], tree.lep_phi[index1], tree.lep_E[index1])\n",
    "                            subleadlepton.SetPtEtaPhiE(tree.lep_pt[index2], tree.lep_eta[index2], tree.lep_phi[index2], tree.lep_E[index2])\n",
    "                        else:\n",
    "                            c6+=1\n",
    "                            leadlepton.SetPtEtaPhiE(tree.lep_pt[index2]/1000., tree.lep_eta[index2], tree.lep_phi[index2], tree.lep_E[index2]/1000.)\n",
    "                            subleadlepton.SetPtEtaPhiE(tree.lep_pt[index1]/1000., tree.lep_eta[index1], tree.lep_phi[index1], tree.lep_E[index1]/1000.)\n",
    "                        lepton12=leadlepton+subleadlepton\n",
    "                        invmass=lepton12.M()/1000.\n",
    "                        if(abs(invmass-91.18)<25.):\n",
    "                            c7+=1\n",
    "                            ptlead=leadlepton.Pt()/1000.\n",
    "                            ptsub=subleadlepton.Pt()/1000.\n",
    "                            invM.append(invmass)\n",
    "                            leadpt.append(ptlead)\n",
    "                            subleadpt.append(ptsub)\n",
    "                            kf+=1\n",
    "    #if k==50000: break\n",
    "#roof.close()\n",
    "end = time.time()\n",
    "duration = end-start\n",
    "print('Initial entries:', k)\n",
    "print('Final entries:', kf)\n",
    "print(\"Finished in {} min {} s\".format(int(duration//60),int(duration%60)))\n",
    "print(c1,c2,c3,c4,c5,c6,c7)\n",
    "#roof[\"signal\"].extend({\"mll\": invM, \"lead\": leadpt, \"sublead\": subleadpt})\n",
    "#roof.close()\n",
    "print('Success closing')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
