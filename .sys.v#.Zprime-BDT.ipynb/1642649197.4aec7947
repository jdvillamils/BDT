{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "84b14f82",
   "metadata": {},
   "source": [
    "# Analysis of the Z prime boson, using a boosted decision tree with SKlearn library  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2c8ef890",
   "metadata": {},
   "source": [
    "Installing requeried packages"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "3e6ef6e2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: pip in /cvmfs/sft.cern.ch/lcg/views/LCG_101swan/x86_64-centos7-gcc10-opt/lib/python3.9/site-packages (21.0.1)\n",
      "Collecting pip\n",
      "  Downloading pip-21.3.1-py3-none-any.whl (1.7 MB)\n",
      "\u001b[K     |████████████████████████████████| 1.7 MB 666 kB/s eta 0:00:01\n",
      "\u001b[?25hInstalling collected packages: pip\n",
      "\u001b[33m  WARNING: The scripts pip, pip3 and pip3.9 are installed in '/eos/user/j/jvillami/.local/bin' which is not on PATH.\n",
      "  Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.\u001b[0m\n",
      "Successfully installed pip-21.3.1\n",
      "Requirement already satisfied: uproot3 in /cvmfs/sft.cern.ch/lcg/views/LCG_101swan/x86_64-centos7-gcc10-opt/lib/python3.9/site-packages (3.14.2)\n",
      "Requirement already satisfied: pandas in /cvmfs/sft.cern.ch/lcg/views/LCG_101swan/x86_64-centos7-gcc10-opt/lib/python3.9/site-packages (1.2.2)\n",
      "Requirement already satisfied: numpy in /cvmfs/sft.cern.ch/lcg/views/LCG_101swan/x86_64-centos7-gcc10-opt/lib/python3.9/site-packages (1.21.1)\n",
      "Requirement already satisfied: matplotlib in /cvmfs/sft.cern.ch/lcg/views/LCG_101swan/x86_64-centos7-gcc10-opt/lib/python3.9/site-packages (3.4.3)\n",
      "Requirement already satisfied: sklearn in /eos/home-j/jvillami/.local/lib/python3.9/site-packages (0.0)\n",
      "Requirement already satisfied: cycler>=0.10 in /cvmfs/sft.cern.ch/lcg/views/LCG_101swan/x86_64-centos7-gcc10-opt/lib/python3.9/site-packages (from matplotlib) (0.10.0)\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /cvmfs/sft.cern.ch/lcg/views/LCG_101swan/x86_64-centos7-gcc10-opt/lib/python3.9/site-packages (from matplotlib) (1.0.1)\n",
      "Requirement already satisfied: pillow>=6.2.0 in /cvmfs/sft.cern.ch/lcg/views/LCG_101swan/x86_64-centos7-gcc10-opt/lib/python3.9/site-packages (from matplotlib) (8.2.0)\n",
      "Requirement already satisfied: pyparsing>=2.2.1 in /cvmfs/sft.cern.ch/lcg/views/LCG_101swan/x86_64-centos7-gcc10-opt/lib/python3.9/site-packages (from matplotlib) (2.4.7)\n",
      "Requirement already satisfied: python-dateutil>=2.7 in /cvmfs/sft.cern.ch/lcg/views/LCG_101swan/x86_64-centos7-gcc10-opt/lib/python3.9/site-packages (from matplotlib) (2.8.2)\n",
      "Requirement already satisfied: six in /cvmfs/sft.cern.ch/lcg/views/LCG_101swan/x86_64-centos7-gcc10-opt/lib/python3.9/site-packages (from cycler>=0.10->matplotlib) (1.16.0)\n",
      "Requirement already satisfied: setuptools in /cvmfs/sft.cern.ch/lcg/views/LCG_101swan/x86_64-centos7-gcc10-opt/lib/python3.9/site-packages (from kiwisolver>=1.0.1->matplotlib) (57.1.0)\n",
      "Requirement already satisfied: pytz>=2017.3 in /cvmfs/sft.cern.ch/lcg/views/LCG_101swan/x86_64-centos7-gcc10-opt/lib/python3.9/site-packages (from pandas) (2021.1)\n",
      "Requirement already satisfied: scikit-learn in /cvmfs/sft.cern.ch/lcg/views/LCG_101swan/x86_64-centos7-gcc10-opt/lib/python3.9/site-packages (from sklearn) (0.24.2)\n",
      "Requirement already satisfied: awkward0 in /cvmfs/sft.cern.ch/lcg/views/LCG_101swan/x86_64-centos7-gcc10-opt/lib/python3.9/site-packages (from uproot3) (0.15.3)\n",
      "Requirement already satisfied: uproot3-methods in /cvmfs/sft.cern.ch/lcg/views/LCG_101swan/x86_64-centos7-gcc10-opt/lib/python3.9/site-packages (from uproot3) (0.10.0)\n",
      "Requirement already satisfied: cachetools in /cvmfs/sft.cern.ch/lcg/views/LCG_101swan/x86_64-centos7-gcc10-opt/lib/python3.9/site-packages (from uproot3) (3.1.1)\n",
      "Requirement already satisfied: scipy>=0.19.1 in /cvmfs/sft.cern.ch/lcg/views/LCG_101swan/x86_64-centos7-gcc10-opt/lib/python3.9/site-packages (from scikit-learn->sklearn) (1.7.0)\n",
      "Requirement already satisfied: joblib>=0.11 in /cvmfs/sft.cern.ch/lcg/views/LCG_101swan/x86_64-centos7-gcc10-opt/lib/python3.9/site-packages (from scikit-learn->sklearn) (1.0.1)\n",
      "Requirement already satisfied: threadpoolctl>=2.0.0 in /eos/home-j/jvillami/.local/lib/python3.9/site-packages (from scikit-learn->sklearn) (3.0.0)\n"
     ]
    }
   ],
   "source": [
    "import sys\n",
    "!{sys.executable} -m pip install --upgrade --user pip # update the pip package installer\n",
    "!{sys.executable} -m pip install uproot3 pandas numpy matplotlib sklearn --user # install required packages"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "id": "b8ba4733",
   "metadata": {},
   "outputs": [],
   "source": [
    "import uproot3\n",
    "import pandas as pd \n",
    "import time \n",
    "import math \n",
    "import numpy as np \n",
    "import matplotlib.pyplot as plt \n",
    "from matplotlib.ticker import AutoMinorLocator \n",
    "\n",
    "#Local information file\n",
    "import infofile "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "345cff99",
   "metadata": {},
   "source": [
    "Samples"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a1f140d6",
   "metadata": {},
   "source": [
    "samples = {\n",
    "\n",
    "    'data' : {\n",
    "        'list' : ['data_A',\n",
    "                 'data_B',\n",
    "                 'data_C',\n",
    "                 'data_D']\n",
    "    },\n",
    "    \n",
    "    'Zprime1000' : {\n",
    "        'list' : ['ZPrime1000_tt']\n",
    "    },\n",
    "    \n",
    "    r'$t\\bar{t}$' : {\n",
    "        'list' : ['ttbar_lep']\n",
    "    },\n",
    "    \n",
    "    'diboson' : {\n",
    "        'list' : ['ZqqZll',\n",
    "                 'WqqZll',\n",
    "                 'WplvWmqq',\n",
    "                 'WlvZqq',\n",
    "                 'lllv',\n",
    "                 'llvv',\n",
    "                 'lvvv',\n",
    "                 ]\n",
    "    },\n",
    "    \n",
    "    'singletop' : {\n",
    "        'list' : ['single_top_tchan',\n",
    "                 'single_antitop_tchan',\n",
    "                 'single_top_schan',\n",
    "                 'single_antitop_schan',\n",
    "                 'single_top_wtchan',\n",
    "                 'single_antitop_wtchan',\n",
    "                 ]\n",
    "    },\n",
    "    \n",
    "    'Z' : {\n",
    "        'list' : ['Zee',\n",
    "                 'Zmumu',\n",
    "                 'Ztautau',\n",
    "                 'Zmumu_PTV0_70_CVetoBVeto',\n",
    "                 'Zmumu_PTV0_70_CFilterBVeto', \n",
    "                 'Zmumu_PTV0_70_BFilter',\n",
    "                 'Zmumu_PTV70_140_CVetoBVeto',\n",
    "                 'Zmumu_PTV70_140_CFilterBVeto',\n",
    "                 'Zmumu_PTV70_140_BFilter', \n",
    "                 'Zmumu_PTV140_280_CVetoBVeto',\n",
    "                 'Zmumu_PTV140_280_CFilterBVeto',\n",
    "                 'Zmumu_PTV140_280_BFilter',\n",
    "                 'Zmumu_PTV280_500_CVetoBVeto', \n",
    "                 'Zmumu_PTV280_500_CFilterBVeto',\n",
    "                 'Zmumu_PTV280_500_BFilter', \n",
    "                 'Zmumu_PTV500_1000', \n",
    "                 'Zmumu_PTV1000_E_CMS']\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "id": "58e93886",
   "metadata": {},
   "outputs": [],
   "source": [
    "samples = {\n",
    "    \n",
    "    'Zprime1000' : {\n",
    "        'list' : ['ZPrime1000_tt']\n",
    "    }\n",
    "    \n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "id": "90e43cd2",
   "metadata": {},
   "outputs": [],
   "source": [
    "lumi = 10 # data_A+B+C+D\n",
    "\n",
    "fraction = 1 # reduce to run quicker\n",
    "\n",
    "tuple_path = \"https://atlas-opendata.web.cern.ch/atlas-opendata/samples/2020/1largeRjet1lep/\" "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "id": "039728e0",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_data_from_files():\n",
    "\n",
    "    data = {} # empty dictionary\n",
    "    for s in samples: \n",
    "        print('Processing '+s+' samples') \n",
    "        frames = [] \n",
    "        for val in samples[s]['list']: \n",
    "            if s == 'data': prefix = \"Data/\" # Data prefix\n",
    "            else: # MC prefix\n",
    "                prefix = \"MC/mc_\"+str(infofile.infos[val][\"DSID\"])+\".\"\n",
    "            fileString = tuple_path+prefix+val+\".1largeRjet1lep.root\" \n",
    "            temp = read_file(fileString,val) \n",
    "            frames.append(temp) \n",
    "        data[s] = pd.concat(frames) \n",
    "    \n",
    "    return data # return dictionary of dataframes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "id": "51f6a2c3",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_xsec_weight(sample):\n",
    "    info = infofile.infos[sample] \n",
    "    xsec_weight = (lumi*1000*info[\"xsec\"])/(info[\"sumw\"]*info[\"red_eff\"]) \n",
    "    return xsec_weight "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "id": "f575ba86",
   "metadata": {},
   "outputs": [],
   "source": [
    "def calc_weight(xsec_weight, mcWeight, scaleFactor_PILEUP,\n",
    "                scaleFactor_ELE, scaleFactor_MUON, \n",
    "                scaleFactor_LepTRIGGER ):\n",
    "    return xsec_weight*mcWeight*scaleFactor_PILEUP*scaleFactor_ELE*scaleFactor_MUON*scaleFactor_LepTRIGGER"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7a30112d",
   "metadata": {},
   "source": [
    "Here, we define functions to apply the required cuts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 267,
   "id": "dba01bb6",
   "metadata": {},
   "outputs": [],
   "source": [
    "def cut_largerjet(largeRjet_n):\n",
    "    return largeRjet_n < 1 # Throw away when met et is less than 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 263,
   "id": "48153a0c",
   "metadata": {},
   "outputs": [],
   "source": [
    "def cut_met_et(met_et):\n",
    "    return met_et < 20000 #Throw away when met et is less than 20k"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 350,
   "id": "a5b639f4",
   "metadata": {},
   "outputs": [],
   "source": [
    "def cut_trige(trige,trigm):#,trig_m):\n",
    "    l=1\n",
    "    if trige==1 or trigm==1:\n",
    "        l=0\n",
    "    return(l != 0) #or (trig_m != True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 257,
   "id": "1c13c3e4",
   "metadata": {},
   "outputs": [],
   "source": [
    "def cut_lep_pt(lep_pt):\n",
    "# throw away when lep pt is minor than 71k\n",
    "# first lepton is [0], 2nd lepton is [1] etc\n",
    "    return lep_pt[0] < 30000"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 352,
   "id": "0981f1ec",
   "metadata": {},
   "outputs": [],
   "source": [
    "def read_file(path,sample):\n",
    "    start = time.time() # start the clock\n",
    "    print(\"\\tProcessing: \"+sample) # print which sample is being processed\n",
    "    data_all = pd.DataFrame() # define empty pandas DataFrame to hold all data for this sample\n",
    "    tree = uproot3.open(path)[\"mini\"] # open the tree called mini\n",
    "    numevents = uproot3.numentries(path, \"mini\") # number of events\n",
    "    print(numevents)\n",
    "    #print(np.dtype(tree[\"jet_n\"]))\n",
    "    if 'data' not in sample: xsec_weight = get_xsec_weight(sample) # get cross-section weight\n",
    "    for data in tree.iterate(['lep_charge','lep_type','lep_pt', 'jet_n', 'largeRjet_n', 'met_et', \n",
    "                              'trigE', 'trigM',\n",
    "                              # uncomment these variables if you want to calculate masses \n",
    "                              #,'lep_eta','lep_phi','lep_E', \n",
    "                              # add more variables here if you make cuts on them \n",
    "                              'mcWeight','scaleFactor_PILEUP',\n",
    "                              'scaleFactor_ELE','scaleFactor_MUON',\n",
    "                              'scaleFactor_LepTRIGGER'\n",
    "                             ], # variables to calculate Monte Carlo weight\n",
    "                             outputtype=pd.DataFrame, # choose output type as pandas DataFrame\n",
    "                             entrystop=numevents*fraction): # process up to numevents*fraction\n",
    "\n",
    "        nIn = len(data.index) # number of events in this batch\n",
    "\n",
    "        if 'data' not in sample: # only do this for Monte Carlo simulation files\n",
    "            # multiply all Monte Carlo weights and scale factors together to give total weight\n",
    "            data['totalWeight'] = np.vectorize(calc_weight)(xsec_weight,\n",
    "                                                            data.mcWeight,\n",
    "                                                            data.scaleFactor_PILEUP,\n",
    "                                                            data.scaleFactor_ELE,\n",
    "                                                            data.scaleFactor_MUON,\n",
    "                                                            data.scaleFactor_LepTRIGGER)\n",
    "\n",
    "        #roof[\"tree1\"].extend({\"branch1\": data.jet_n})\n",
    "        #data[\"leppt1\"]= np.vectorize(calc_lep_pt_i)(data.lep_pt,0)\n",
    "        print(data)\n",
    "\n",
    "        # cut on lepton charge using the function cut_lep_charge defined above\n",
    "        fail = data[ np.vectorize(cut_largerjet)(data.largeRjet_n) ].index\n",
    "        data.drop(fail, inplace=True)\n",
    "        \n",
    "        fail = data[ np.vectorize(cut_met_et)(data.met_et)].index\n",
    "        data.drop(fail, inplace=True)\n",
    "        \n",
    "        fail = data[ np.vectorize(cut_trige)(data.trigE,data.trigM)].index #,data.trigM) ].index\n",
    "        data.drop(fail, inplace=True)\n",
    "        \n",
    "        print('cutttttt')\n",
    "        \n",
    "        print(data)\n",
    "\n",
    "        # cut on lepton type using the function cut_lep_type defined above\n",
    "        #fail = data[ np.vectorize(cut_lep_type)(data.lep_type) ].index\n",
    "        #data.drop(fail, inplace=True)\n",
    "\n",
    "        # return the individual lepton transverse momenta in GeV\n",
    "        #data['lep_pt_1'] = np.vectorize(calc_lep_pt_i)(data.lep_pt,1)\n",
    "        #data['lep_pt_2'] = np.vectorize(calc_lep_pt_i)(data.lep_pt,2)\n",
    "        \n",
    "        # dataframe contents can be printed at any stage like this\n",
    "        #print(data)\n",
    "\n",
    "        # dataframe column can be printed at any stage like this\n",
    "        #print(data['lep_pt'])\n",
    "\n",
    "        # multiple dataframe columns can be printed at any stage like this\n",
    "        #print(data[['lep_pt','lep_eta']])\n",
    "\n",
    "        nOut = len(data.index) # number of events passing cuts in this batch\n",
    "        data_all = data_all.append(data) # append dataframe from this batch to the dataframe for the whole sample\n",
    "        elapsed = time.time() - start # time taken to process\n",
    "        print(\"\\t\\t nIn: \"+str(nIn)+\",\\t nOut: \\t\"+str(nOut)+\"\\t in \"+str(round(elapsed,1))+\"s\") # events before and after\n",
    "    \n",
    "    return data_all # return dataframe containing events passing all cuts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 244,
   "id": "9c0e9d66",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<TFileRecreate b'example.root' at 0x7f0bfc122460>"
      ]
     },
     "execution_count": 244,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "roof = uproot3.recreate(\"example.root\")\n",
    "roof"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 245,
   "id": "aba117d2",
   "metadata": {},
   "outputs": [],
   "source": [
    "roof[\"tree1\"] = uproot3.newtree({\"branch1\": int, \"branch2\": np.float64})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 353,
   "id": "194b66b2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processing Zprime1000 samples\n",
      "\tProcessing: ZPrime1000_tt\n",
      "29427\n",
      "      lep_charge  lep_type                 lep_pt  jet_n  largeRjet_n  \\\n",
      "entry                                                                   \n",
      "0        [-1, 1]  [11, 13]  [171723.5, 10837.586]      3            1   \n",
      "1            [1]      [13]            [70814.586]      6            1   \n",
      "2           [-1]      [13]            [43500.668]      5            1   \n",
      "3           [-1]      [13]             [158294.7]      4            1   \n",
      "4           [-1]      [13]           [110652.445]      4            1   \n",
      "...          ...       ...                    ...    ...          ...   \n",
      "29422       [-1]      [11]             [131601.7]      4            1   \n",
      "29423        [1]      [11]             [135833.2]      5            2   \n",
      "29424       [-1]      [11]             [135156.4]      5            2   \n",
      "29425        [1]      [13]            [124785.65]      4            1   \n",
      "29426        [1]      [13]            [251367.95]      6            1   \n",
      "\n",
      "              met_et  trigE  trigM  mcWeight  scaleFactor_PILEUP  \\\n",
      "entry                                                              \n",
      "0      110063.726562   True  False       1.0            1.214122   \n",
      "1      295537.343750  False   True       1.0            1.241677   \n",
      "2       67189.203125  False   True       1.0            1.554649   \n",
      "3      284007.375000  False   True       1.0            0.000000   \n",
      "4       94579.984375  False   True       1.0            0.506784   \n",
      "...              ...    ...    ...       ...                 ...   \n",
      "29422   14356.919922   True  False       1.0            0.187531   \n",
      "29423   68193.640625   True  False       1.0            0.402058   \n",
      "29424   66749.515625   True  False       1.0            1.241677   \n",
      "29425  159977.234375  False   True       1.0            0.923924   \n",
      "29426   61157.843750  False   True       1.0            0.738662   \n",
      "\n",
      "       scaleFactor_ELE  scaleFactor_MUON  scaleFactor_LepTRIGGER  totalWeight  \n",
      "entry                                                                          \n",
      "0              0.98089          0.996001                0.998660     0.066764  \n",
      "1              1.00000          1.000081                1.013633     0.070942  \n",
      "2              1.00000          1.001872                0.992762     0.087151  \n",
      "3              1.00000          0.992404                0.964359     0.000000  \n",
      "4              1.00000          0.993733                0.724848     0.020574  \n",
      "...                ...               ...                     ...          ...  \n",
      "29422          0.98916          1.000000                0.997650     0.010430  \n",
      "29423          0.98230          1.000000                1.006320     0.022400  \n",
      "29424          0.99093          1.000000                1.003060     0.069560  \n",
      "29425          1.00000          0.991474                0.753185     0.038887  \n",
      "29426          1.00000          0.999528                0.948081     0.039452  \n",
      "\n",
      "[29427 rows x 14 columns]\n",
      "cutttttt\n",
      "      lep_charge  lep_type                 lep_pt  jet_n  largeRjet_n  \\\n",
      "entry                                                                   \n",
      "0        [-1, 1]  [11, 13]  [171723.5, 10837.586]      3            1   \n",
      "1            [1]      [13]            [70814.586]      6            1   \n",
      "2           [-1]      [13]            [43500.668]      5            1   \n",
      "3           [-1]      [13]             [158294.7]      4            1   \n",
      "4           [-1]      [13]           [110652.445]      4            1   \n",
      "...          ...       ...                    ...    ...          ...   \n",
      "29421       [-1]      [11]            [187655.39]      6            1   \n",
      "29423        [1]      [11]             [135833.2]      5            2   \n",
      "29424       [-1]      [11]             [135156.4]      5            2   \n",
      "29425        [1]      [13]            [124785.65]      4            1   \n",
      "29426        [1]      [13]            [251367.95]      6            1   \n",
      "\n",
      "              met_et  trigE  trigM  mcWeight  scaleFactor_PILEUP  \\\n",
      "entry                                                              \n",
      "0      110063.726562   True  False       1.0            1.214122   \n",
      "1      295537.343750  False   True       1.0            1.241677   \n",
      "2       67189.203125  False   True       1.0            1.554649   \n",
      "3      284007.375000  False   True       1.0            0.000000   \n",
      "4       94579.984375  False   True       1.0            0.506784   \n",
      "...              ...    ...    ...       ...                 ...   \n",
      "29421  153197.921875   True  False       1.0            1.214122   \n",
      "29423   68193.640625   True  False       1.0            0.402058   \n",
      "29424   66749.515625   True  False       1.0            1.241677   \n",
      "29425  159977.234375  False   True       1.0            0.923924   \n",
      "29426   61157.843750  False   True       1.0            0.738662   \n",
      "\n",
      "       scaleFactor_ELE  scaleFactor_MUON  scaleFactor_LepTRIGGER  totalWeight  \n",
      "entry                                                                          \n",
      "0              0.98089          0.996001                0.998660     0.066764  \n",
      "1              1.00000          1.000081                1.013633     0.070942  \n",
      "2              1.00000          1.001872                0.992762     0.087151  \n",
      "3              1.00000          0.992404                0.964359     0.000000  \n",
      "4              1.00000          0.993733                0.724848     0.020574  \n",
      "...                ...               ...                     ...          ...  \n",
      "29421          0.97996          1.000000                1.012650     0.067907  \n",
      "29423          0.98230          1.000000                1.006320     0.022400  \n",
      "29424          0.99093          1.000000                1.003060     0.069560  \n",
      "29425          1.00000          0.991474                0.753185     0.038887  \n",
      "29426          1.00000          0.999528                0.948081     0.039452  \n",
      "\n",
      "[28404 rows x 14 columns]\n",
      "\t\t nIn: 29427,\t nOut: \t28404\t in 1.4s\n",
      "Time taken: 1.4s\n"
     ]
    }
   ],
   "source": [
    "start = time.time() # time at start of whole processing\n",
    "data = get_data_from_files() # process all files\n",
    "roof.close()\n",
    "elapsed = time.time() - start # time after whole processing\n",
    "print(\"Time taken: \"+str(round(elapsed,1))+\"s\") # print total time taken to process every file"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
